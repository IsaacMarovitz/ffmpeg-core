From 0b19a91216c630e8193573219ed0f83e2bca64eb Mon Sep 17 00:00:00 2001
From: Isaac Marovitz <isaacryu@icloud.com>
Date: Wed, 30 Jul 2025 16:54:47 +0100
Subject: [PATCH] Update portfile

Signed-off-by: Isaac Marovitz <isaacryu@icloud.com>

Add xmaframes

Signed-off-by: Isaac Marovitz <isaacryu@icloud.com>
---
 ports/ffmpeg/0008-xmaframes.patch | 287 ++++++++++++++++++++++++++++++
 ports/ffmpeg/portfile.cmake       |  14 +-
 2 files changed, 299 insertions(+), 2 deletions(-)
 create mode 100644 ports/ffmpeg/0008-xmaframes.patch

diff --git a/ports/ffmpeg/0008-xmaframes.patch b/ports/ffmpeg/0008-xmaframes.patch
new file mode 100644
index 0000000000..9bed6f27b0
--- /dev/null
+++ b/ports/ffmpeg/0008-xmaframes.patch
@@ -0,0 +1,287 @@
+From f8fcccf99cc3a06809570c9b2becea99ae041791 Mon Sep 17 00:00:00 2001
+From: Isaac Marovitz <isaacryu@icloud.com>
+Date: Sun, 6 Jul 2025 13:23:15 +0100
+Subject: [PATCH 1/4] avcodec/wmaprodec: add xma raw frame decoder
+
+packets need to be handled externally
+useful for hardware decoder emulation
+
+Co-authored-by: Joel Linn <jl@conductive.de>
+Signed-off-by: Isaac Marovitz <isaacryu@icloud.com>
+---
+ configure               |  1 +
+ libavcodec/Makefile     |  1 +
+ libavcodec/allcodecs.c  |  1 +
+ libavcodec/codec_desc.c |  7 +++
+ libavcodec/codec_id.h   |  1 +
+ libavcodec/wmaprodec.c  | 96 +++++++++++++++++++++++++++++++++++++++++
+ 6 files changed, 107 insertions(+)
+
+diff --git a/configure b/configure
+index 63d11de207793..00756b66198f4 100755
+--- a/configure
++++ b/configure
+@@ -3171,6 +3171,7 @@ wmv3_decoder_select="vc1_decoder"
+ wmv3image_decoder_select="wmv3_decoder"
+ xma1_decoder_select="wmapro_decoder"
+ xma2_decoder_select="wmapro_decoder"
++xmaframes_decoder_select="wmapro_decoder"
+ ylc_decoder_select="bswapdsp"
+ zerocodec_decoder_select="inflate_wrapper"
+ zlib_decoder_select="inflate_wrapper"
+diff --git a/libavcodec/Makefile b/libavcodec/Makefile
+index 215577f7c9f15..065c35c85615c 100644
+--- a/libavcodec/Makefile
++++ b/libavcodec/Makefile
+@@ -851,6 +851,7 @@ OBJS-$(CONFIG_XFACE_ENCODER)           += xfaceenc.o xface.o
+ OBJS-$(CONFIG_XL_DECODER)              += xl.o
+ OBJS-$(CONFIG_XMA1_DECODER)            += wmaprodec.o wma.o wma_common.o
+ OBJS-$(CONFIG_XMA2_DECODER)            += wmaprodec.o wma.o wma_common.o
++OBJS-$(CONFIG_XMAFRAMES_DECODER)       += wmaprodec.o wma.o wma_common.o
+ OBJS-$(CONFIG_XPM_DECODER)             += xpmdec.o
+ OBJS-$(CONFIG_XSUB_DECODER)            += xsubdec.o
+ OBJS-$(CONFIG_XSUB_ENCODER)            += xsubenc.o
+diff --git a/libavcodec/allcodecs.c b/libavcodec/allcodecs.c
+index 7b01453ca28df..d8b2c499eba9b 100644
+--- a/libavcodec/allcodecs.c
++++ b/libavcodec/allcodecs.c
+@@ -557,6 +557,7 @@ extern const FFCodec ff_wmavoice_decoder;
+ extern const FFCodec ff_ws_snd1_decoder;
+ extern const FFCodec ff_xma1_decoder;
+ extern const FFCodec ff_xma2_decoder;
++extern const FFCodec ff_xmaframes_decoder;
+ 
+ /* PCM codecs */
+ extern const FFCodec ff_pcm_alaw_encoder;
+diff --git a/libavcodec/codec_desc.c b/libavcodec/codec_desc.c
+index dae229668937d..2352168d365e5 100644
+--- a/libavcodec/codec_desc.c
++++ b/libavcodec/codec_desc.c
+@@ -3298,6 +3298,13 @@ static const AVCodecDescriptor codec_descriptors[] = {
+         .long_name = NULL_IF_CONFIG_SMALL("Xbox Media Audio 2"),
+         .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
+     },
++    {
++        .id        = AV_CODEC_ID_XMAFRAMES,
++        .type      = AVMEDIA_TYPE_AUDIO,
++        .name      = "xmaframes",
++        .long_name = NULL_IF_CONFIG_SMALL("Xbox Media Audio raw frames"),
++        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
++    },
+     {
+         .id        = AV_CODEC_ID_DST,
+         .type      = AVMEDIA_TYPE_AUDIO,
+diff --git a/libavcodec/codec_id.h b/libavcodec/codec_id.h
+index d00d3fe121ea0..5e492a5b65844 100644
+--- a/libavcodec/codec_id.h
++++ b/libavcodec/codec_id.h
+@@ -528,6 +528,7 @@ enum AVCodecID {
+     AV_CODEC_ID_INTERPLAY_ACM,
+     AV_CODEC_ID_XMA1,
+     AV_CODEC_ID_XMA2,
++    AV_CODEC_ID_XMAFRAMES,
+     AV_CODEC_ID_DST,
+     AV_CODEC_ID_ATRAC3AL,
+     AV_CODEC_ID_ATRAC3PAL,
+diff --git a/libavcodec/wmaprodec.c b/libavcodec/wmaprodec.c
+index d87ed0433e19e..a2ac771b50cb3 100644
+--- a/libavcodec/wmaprodec.c
++++ b/libavcodec/wmaprodec.c
+@@ -400,6 +400,11 @@ static av_cold int decode_init(WMAProDecodeCtx *s, AVCodecContext *avctx, int nu
+         s->bits_per_sample = 16;
+         channel_mask       = 0; /* would need to aggregate from all streams */
+         s->nb_channels     = edata_ptr[8 + 20*num_stream + 17]; /* nth stream config */
++    } else if (avctx->codec_id == AV_CODEC_ID_XMAFRAMES) {
++        s->decode_flags    = 0x10d6;
++        s->bits_per_sample = 16;
++        channel_mask       = 0;
++        s->nb_channels     = avctx->ch_layout.nb_channels;
+     } else if (avctx->codec_id == AV_CODEC_ID_WMAPRO && avctx->extradata_size >= 18) {
+         s->decode_flags    = AV_RL16(edata_ptr+14);
+         channel_mask       = AV_RL32(edata_ptr+2);
+@@ -2082,6 +2087,82 @@ static void xma_flush(AVCodecContext *avctx)
+     s->flushed = 0;
+ }
+ 
++static av_cold int xmaframes_decode_init(AVCodecContext* avctx)
++{
++    WMAProDecodeCtx *s = avctx->priv_data;
++
++    avctx->block_align = 2048;
++
++    return decode_init(s, avctx, 0);
++}
++
++static av_cold int xmaframes_decode_end(AVCodecContext* avctx)
++{
++    WMAProDecodeCtx *s = avctx->priv_data;
++
++    decode_end(s);
++
++    return 0;
++}
++
++/**
++ *@brief Decode a single WMA frame. Packet parsing is out of this decoders scope.
++ *@param avctx codec context
++ *@param data the output buffer
++ *@param avpkt input packet. the data is preceeded by one byte that contains bit padding information
++ *@return number of bytes that were read from the input buffer
++ */
++static int xmaframes_decode_packet(AVCodecContext *avctx, void *data,
++                                   int *got_frame_ptr, AVPacket *avpkt)
++{
++    WMAProDecodeCtx *s = avctx->priv_data;
++    GetBitContext* gb = &s->gb;
++    AVFrame *frame = data;
++    int ret, xma_frame_len = 0;
++    uint8_t padding_start, padding_end = 0;
++
++    if (avpkt->size < 3) {
++        av_log(avctx, AV_LOG_ERROR, "XMA Frame is to small, %d bytes\n", avpkt->size);
++        return AVERROR_INVALIDDATA;
++    }
++
++    s->buf_bit_size = avpkt->size << 3;
++    init_get_bits(gb, avpkt->data, s->buf_bit_size);
++
++    /** get padding sizes from first byte */
++    padding_start = get_bits(gb, 3);
++    padding_end = get_bits(gb, 3);
++    skip_bits(gb, 2);
++
++    /** move bit reader to start of xma frame */
++    skip_bits(gb, padding_start);
++
++
++    /** validate buffer size */
++    xma_frame_len = show_bits(gb, s->log2_frame_size);
++    if (s->buf_bit_size !=
++        8 + padding_start + xma_frame_len + padding_end) {
++        av_log(avctx, AV_LOG_ERROR, "XMA Frame sizing incorrent: \n"
++                                    "   s->buf_bit_size != (8 + padding_start + xma_frame_len + padding_end)\n"
++                                    "=> %d != 8 + (%d + %d + %d)\n",
++               s->buf_bit_size, padding_start, xma_frame_len, padding_end);
++        return AVERROR_INVALIDDATA;
++    }
++
++    save_bits(s, gb, xma_frame_len, 0);
++
++    /** get output buffer */
++    frame->nb_samples = s->samples_per_frame;
++    if ((ret = ff_get_buffer(avctx, frame, 0)) < 0) {
++        s->packet_loss = 1;
++        return 0;
++    }
++
++    decode_frame(s, data, got_frame_ptr);
++
++    return avpkt->size;
++}
++
+ /**
+  *@brief wmapro decoder
+  */
+@@ -2129,3 +2210,18 @@ const FFCodec ff_xma2_decoder = {
+     CODEC_SAMPLEFMTS(AV_SAMPLE_FMT_FLTP),
+     .caps_internal  = FF_CODEC_CAP_INIT_CLEANUP,
+ };
++
++const FFCodec ff_xmaframes_decoder = {
++    .p.name         = "xmaframes",
++    CODEC_LONG_NAME("Xbox Media Audio raw frames"),
++    .p.type         = AVMEDIA_TYPE_AUDIO,
++    .p.id           = AV_CODEC_ID_XMAFRAMES,
++    .priv_data_size = sizeof(WMAProDecodeCtx),
++    .init           = xmaframes_decode_init,
++    .close          = xmaframes_decode_end,
++    FF_CODEC_DECODE_CB(xmaframes_decode_packet),
++    .flush          = wmapro_flush,
++    .p.capabilities = AV_CODEC_CAP_DR1,
++    CODEC_SAMPLEFMTS(AV_SAMPLE_FMT_FLTP),
++    .caps_internal  = FF_CODEC_CAP_INIT_CLEANUP,
++};
+
+From 6bc3d67e53e91d6656a9194f7b3873da73c04883 Mon Sep 17 00:00:00 2001
+From: Isaac Marovitz <isaacryu@icloud.com>
+Date: Sun, 6 Jul 2025 13:36:28 +0100
+Subject: [PATCH 2/4] Fix version.c
+
+Signed-off-by: Isaac Marovitz <isaacryu@icloud.com>
+---
+ libavcodec/version.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/libavcodec/version.c b/libavcodec/version.c
+index 8a0398f28ff3b..ba8fdac457e04 100644
+--- a/libavcodec/version.c
++++ b/libavcodec/version.c
+@@ -35,7 +35,7 @@ unsigned avcodec_version(void)
+                   AV_CODEC_ID_PCM_SGA      == 65572 &&
+                   AV_CODEC_ID_ADPCM_XMD    == 69683 &&
+                   AV_CODEC_ID_CBD2_DPCM    == 81928 &&
+-                  AV_CODEC_ID_QOA          == 86121 &&
++                  AV_CODEC_ID_QOA          == 86122 &&
+                   AV_CODEC_ID_IVTV_VBI     == 94234 &&
+                   AV_CODEC_ID_SMPTE_2038   == 98315,
+                   "Don't insert new codec ids in the middle of a list");
+
+From b48478c1c0766eb19a713cb771b87d8cb10d7d75 Mon Sep 17 00:00:00 2001
+From: Isaac Marovitz <isaacryu@icloud.com>
+Date: Sun, 6 Jul 2025 13:38:26 +0100
+Subject: [PATCH 3/4] Fix signature
+
+Signed-off-by: Isaac Marovitz <isaacryu@icloud.com>
+---
+ libavcodec/wmaprodec.c | 10 +---------
+ 1 file changed, 1 insertion(+), 9 deletions(-)
+
+diff --git a/libavcodec/wmaprodec.c b/libavcodec/wmaprodec.c
+index a2ac771b50cb3..a8db563a6addc 100644
+--- a/libavcodec/wmaprodec.c
++++ b/libavcodec/wmaprodec.c
+@@ -2105,19 +2105,11 @@ static av_cold int xmaframes_decode_end(AVCodecContext* avctx)
+     return 0;
+ }
+ 
+-/**
+- *@brief Decode a single WMA frame. Packet parsing is out of this decoders scope.
+- *@param avctx codec context
+- *@param data the output buffer
+- *@param avpkt input packet. the data is preceeded by one byte that contains bit padding information
+- *@return number of bytes that were read from the input buffer
+- */
+-static int xmaframes_decode_packet(AVCodecContext *avctx, void *data,
++static int xmaframes_decode_packet(AVCodecContext *avctx, AVFrame *frame,
+                                    int *got_frame_ptr, AVPacket *avpkt)
+ {
+     WMAProDecodeCtx *s = avctx->priv_data;
+     GetBitContext* gb = &s->gb;
+-    AVFrame *frame = data;
+     int ret, xma_frame_len = 0;
+     uint8_t padding_start, padding_end = 0;
+ 
+
+From 706d3a4d746b03ffd05b76c869814ccb7fb50541 Mon Sep 17 00:00:00 2001
+From: Isaac Marovitz <isaacryu@icloud.com>
+Date: Sun, 6 Jul 2025 13:41:51 +0100
+Subject: [PATCH 4/4] Typo
+
+Signed-off-by: Isaac Marovitz <isaacryu@icloud.com>
+---
+ libavcodec/wmaprodec.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/libavcodec/wmaprodec.c b/libavcodec/wmaprodec.c
+index a8db563a6addc..6cd81ce5cebf1 100644
+--- a/libavcodec/wmaprodec.c
++++ b/libavcodec/wmaprodec.c
+@@ -2150,7 +2150,7 @@ static int xmaframes_decode_packet(AVCodecContext *avctx, AVFrame *frame,
+         return 0;
+     }
+ 
+-    decode_frame(s, data, got_frame_ptr);
++    decode_frame(s, frame, got_frame_ptr);
+ 
+     return avpkt->size;
+ }
diff --git a/ports/ffmpeg/portfile.cmake b/ports/ffmpeg/portfile.cmake
index 519b343af0..9abcbbd3a5 100644
--- a/ports/ffmpeg/portfile.cmake
+++ b/ports/ffmpeg/portfile.cmake
@@ -11,6 +11,7 @@ vcpkg_from_github(
         0004-dependencies.patch
         0005-fix-nasm.patch
         0007-fix-lib-naming.patch
+        0008-xmaframes.patch
         0013-define-WINVER.patch
         0020-fix-aarch64-libswscale.patch
         0024-fix-osx-host-c11.patch
@@ -29,7 +30,11 @@ if (VCPKG_TARGET_ARCHITECTURE STREQUAL "x86" OR VCPKG_TARGET_ARCHITECTURE STREQU
     vcpkg_add_to_path("${NASM_EXE_PATH}")
 endif()
 
-set(OPTIONS "--enable-pic --disable-doc --enable-debug --enable-runtime-cpudetect --disable-autodetect")
+set(OPTIONS "--enable-pic --disable-doc --enable-runtime-cpudetect --disable-autodetect")
+
+# Only enable what is used by MarathonRecomp
+string(APPEND OPTIONS " --disable-everything")
+string(APPEND OPTIONS " --enable-decoder=xmaframes")
 
 if(VCPKG_TARGET_IS_MINGW)
     if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x86")
@@ -61,7 +66,7 @@ endif()
 vcpkg_cmake_get_vars(cmake_vars_file)
 include("${cmake_vars_file}")
 if(VCPKG_DETECTED_MSVC)
-    string(APPEND OPTIONS " --disable-inline-asm") # clang-cl has inline assembly but this leads to undefined symbols.
+    # string(APPEND OPTIONS " --disable-inline-asm") # clang-cl has inline assembly but this leads to undefined symbols.
     set(OPTIONS "--toolchain=msvc ${OPTIONS}")
     # This is required because ffmpeg depends upon optimizations to link correctly
     string(APPEND VCPKG_COMBINED_C_FLAGS_DEBUG " -O2")
@@ -713,6 +718,11 @@ if (NOT VCPKG_BUILD_TYPE OR VCPKG_BUILD_TYPE STREQUAL "release")
     # We use response files here as the only known way to handle spaces in paths
     set(crsp "${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel/cflags.rsp")
     string(REGEX REPLACE "-arch [A-Za-z0-9_]+" "" VCPKG_COMBINED_C_FLAGS_RELEASE_SANITIZED "${VCPKG_COMBINED_C_FLAGS_RELEASE}")
+    if(VCPKG_TARGET_IS_OSX)
+        # macosx-version-min version is set with current macOS version. So replace them to 11.0
+        string(REGEX REPLACE "-mmacosx-version-min=[0-9]+.[0-9]+" "" VCPKG_COMBINED_C_FLAGS_RELEASE_SANITIZED "${VCPKG_COMBINED_C_FLAGS_RELEASE_SANITIZED}")
+        string(APPEND VCPKG_COMBINED_C_FLAGS_RELEASE_SANITIZED " -mmacosx-version-min=11.0")
+    endif()
     file(WRITE "${crsp}" "${VCPKG_COMBINED_C_FLAGS_RELEASE_SANITIZED}")
     set(ldrsp "${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel/ldflags.rsp")
     string(REGEX REPLACE "-arch [A-Za-z0-9_]+" "" VCPKG_COMBINED_SHARED_LINKER_FLAGS_RELEASE_SANITIZED "${VCPKG_COMBINED_SHARED_LINKER_FLAGS_RELEASE}")
-- 
2.39.5 (Apple Git-154)
